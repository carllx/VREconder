# VR Video Processing Pipeline - Master Rules

## 规则文件引用

本文件是VR视频处理流水线项目的总规则文件，引用了所有其他规则文件。

### 核心规则文件

- **项目概览**: `project-overview.mdc` - 项目目标、架构和工作流程
- **架构设计**: `architecture.mdc` - 目录结构、模块设计和配置管理
- **Python编码**: `python-coding.mdc` - Python代码规范和最佳实践
- **PowerShell编码**: `powershell-coding.mdc` - PowerShell脚本规范
- **Bash编码**: `bash-coding.mdc` - Bash脚本规范
- **视频处理**: `video-processing.mdc` - 视频处理领域特定规则
- **测试规范**: `testing.mdc` - 测试策略和标准
- **重构指导**: `refactoring.mdc` - 重构原则和步骤

## 规则应用范围

### 文件类型匹配
- **Python文件**: `*.py` - 应用Python编码规则
- **PowerShell文件**: `*.ps1` - 应用PowerShell编码规则
- **Bash文件**: `*.sh` - 应用Bash编码规则
- **配置文件**: `*.yaml`, `*.yml`, `*.json` - 应用架构规则
- **文档文件**: `*.md` - 应用项目概览规则

### 目录匹配
- **源代码**: `src/` - 应用所有编码规则
- **脚本**: `scripts/` - 应用脚本相关规则
- **配置**: `config/` - 应用架构和配置规则
- **测试**: `tests/` - 应用测试规则
- **文档**: `docs/` - 应用文档规范

## 规则优先级

### 高优先级规则
1. **架构设计** - 确保项目结构合理
2. **视频处理** - 核心业务逻辑正确性
3. **错误处理** - 系统稳定性和可靠性

### 中优先级规则
1. **代码规范** - 代码质量和可读性
2. **测试覆盖** - 功能正确性验证
3. **性能优化** - 系统性能表现

### 低优先级规则
1. **文档完善** - 项目可维护性
2. **代码风格** - 团队协作效率

## 规则执行顺序

1. **项目概览** - 理解项目目标和范围
2. **架构设计** - 确定整体架构和结构
3. **领域规则** - 应用业务特定规则
4. **语言规则** - 应用编程语言规范
5. **测试规则** - 确保代码质量
6. **重构规则** - 持续改进代码

## 规则冲突处理

当不同规则文件之间存在冲突时，按以下优先级处理：

1. **视频处理规则** - 业务逻辑正确性优先
2. **架构规则** - 系统设计一致性优先
3. **语言特定规则** - 编程语言最佳实践
4. **通用编码规则** - 代码质量标准

## 规则更新和维护

### 规则更新流程
1. 识别需要更新的规则
2. 在相应的规则文件中进行修改
3. 更新本主规则文件的引用
4. 通知团队成员规则变更
5. 验证规则应用效果

### 规则版本控制
- 每个规则文件都有版本标识
- 重大规则变更需要版本号更新
- 保持规则文件的向后兼容性

## 规则应用指南

### 新功能开发
1. 参考项目概览了解功能目标
2. 遵循架构设计确定模块位置
3. 应用相应语言的编码规范
4. 实现视频处理相关逻辑
5. 编写相应的测试用例
6. 考虑重构优化代码质量

### 代码审查
1. 检查是否符合架构设计
2. 验证视频处理逻辑正确性
3. 确认代码规范遵循情况
4. 检查测试覆盖是否充分
5. 评估是否需要重构优化

### 问题排查
1. 查看错误处理规则
2. 检查日志记录规范
3. 验证配置管理正确性
4. 确认测试用例完整性

## 规则合规性检查

### 自动化检查
```bash
# 代码风格检查
flake8 src/
black --check src/

# 类型检查
mypy src/

# 测试覆盖率
pytest --cov=src --cov-report=html

# 架构合规性
python tools/architecture_checker.py
```

### 手动检查清单
- [ ] 目录结构符合架构设计
- [ ] 代码遵循语言规范
- [ ] 视频处理逻辑正确
- [ ] 错误处理完善
- [ ] 测试覆盖充分
- [ ] 文档完整准确

## 规则培训和支持

### 新成员培训
1. 阅读项目概览了解项目
2. 学习架构设计原则
3. 掌握编程语言规范
4. 理解视频处理规则
5. 练习测试编写方法

### 技术支持
- 规则相关问题咨询
- 代码审查指导
- 架构设计建议
- 测试策略指导

## 规则效果评估

### 质量指标
- 代码复杂度降低
- 错误率减少
- 开发效率提升
- 维护成本降低

### 定期评估
- 每月规则执行情况回顾
- 季度规则效果评估
- 年度规则体系优化

---

**注意**: 本规则文件是项目的核心指导文档，所有开发活动都应遵循这些规则。如有疑问或建议，请及时反馈。
