# VR Video Processing Pipeline - Architecture Rules

## 目录结构规范

### 核心目录
```
app_VR/
├── src/                          # 核心源代码
│   ├── classifiers/              # 视频分类器
│   ├── processors/               # 视频处理器
│   ├── encoders/                 # 编码器模块
│   ├── mergers/                  # 合并器模块
│   ├── utils/                    # 工具函数
│   └── config/                   # 配置文件
├── scripts/                      # 可执行脚本
│   ├── windows/                  # Windows PowerShell脚本
│   ├── macos/                    # macOS Shell脚本
│   └── cross-platform/           # 跨平台脚本
├── config/                       # 配置文件
├── logs/                         # 日志文件
├── tests/                        # 测试文件
├── docs/                         # 文档
└── templates/                    # 模板文件
```

### 命名规范
- **目录**: 使用小写字母和下划线
- **Python文件**: `snake_case.py`
- **PowerShell文件**: `Verb-Noun.ps1`
- **Bash文件**: `snake_case.sh`
- **配置文件**: `kebab-case.yaml`

## 模块设计原则

### 1. 单一职责原则
每个模块只负责一个特定功能：
- `classifiers/`: 视频分类和重命名
- `processors/`: 视频分割和处理
- `encoders/`: 编码转换
- `mergers/`: 片段合并
- `utils/`: 通用工具函数

### 2. 依赖注入
使用配置对象进行依赖注入：
```python
class VideoClassifier:
    def __init__(self, config: Config):
        self.config = config
        self.logger = get_logger(__name__)
```

### 3. 接口一致性
所有模块实现统一的接口模式：
- 初始化方法接受配置对象
- 主要方法返回处理结果
- 统一的错误处理机制
- 标准的日志记录

## 配置管理

### 配置文件结构
```yaml
# config/settings.yaml
app:
  name: "VR Video Processing Pipeline"
  version: "2.0.0"
  debug: false

paths:
  download: "D:\Downloads\VR\VR_Video_Processing/01_Download_Completed"
  output: "D:\Downloads\VR\VR_Video_Processing/Output"
  temp: "D:\Downloads\VR\VR_Video_Processing/Temp"

encoding:
  hevc:
    preset: "slower"
    crf_range:
      min: 20
      max: 38
    profile: "main10"
```

### 环境变量支持
- 使用环境变量覆盖配置文件
- 支持 `.env` 文件
- 配置验证和默认值

## 跨平台兼容性

### 路径处理
- 使用 `pathlib` 进行跨平台路径处理
- 支持相对路径和绝对路径
- 处理UNC路径和网络路径

### 脚本组织
- Windows脚本放在 `scripts/windows/`
- macOS脚本放在 `scripts/macos/`
- 跨平台脚本放在 `scripts/cross-platform/`

## 性能优化

### 并发处理
- 使用多进程处理大文件
- 合理设置线程数
- 避免资源竞争

### 内存管理
- 及时释放大对象
- 使用生成器处理大文件
- 避免一次性加载整个文件到内存

## 错误处理

### 统一错误处理
- 自定义异常类
- 错误码和错误消息
- 错误恢复机制

### 日志记录
- 结构化日志格式
- 不同级别的日志
- 日志轮转和归档
